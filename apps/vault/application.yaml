apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: vault-dev
  # You'll usually want to add your resources to the argocd namespace.
  namespace: argocd
  # Add this finalizer ONLY if you want these to cascade delete.
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  # The project the application belongs to.
  project: default
  # Source of the application manifests
  source:
    repoURL: https://helm.releases.hashicorp.com  # Can point to either a Helm chart repo or a git repo.
    targetRevision: 0.21.0  # For Helm, this refers to the chart version.

    # helm specific config
    chart: vault   # Set this when pulling directly from a Helm repo. DO NOT set for git-hosted Helm charts.
    helm:
      # Extra parameters to set (same as setting through values.yaml, but these take precedence)
      # Release name override (defaults to application name)
      releaseName: vault
      # Optional Helm version to template with. If omitted it will fall back to look at the 'apiVersion' in Chart.yaml
      # and decide which Helm binary to use automatically. This field can be either 'v2' or 'v3'.
      version: v3
      values: |
        injector:
          enabled: false
        server:
          dev:
            enabled: true
          postStart:
            - /bin/sh
            - -c
            - |
              sleep 10s;\
              vault operator init; vault auth enable kubernetes; vault write auth/kubernetes/config token_reviewer_jwt="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
              kubernetes_host="$(echo https://$KUBERNETES_PORT_443_TCP_ADDR:443)" kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt; \
              vault write auth/kubernetes/role/argocd bound_service_account_names=argocd-repo-server bound_service_account_namespaces=argocd policies=argocd ttl=24h; \
              vault secrets enable kv-v2; vault kv put kv-v2/argocd password="123456"; echo -e 'path "kv-v2/data/argocd" { \n capabilities = ["read", "list"] \n }' > /tmp/argocd.hcl; vault policy write argocd  /tmp/argocd.hcl
                

                




  # Destination cluster and namespace to deploy the application
  destination:
    server: https://kubernetes.default.svc
    namespace: vault

  # Sync policy
  syncPolicy:
    automated: # automated sync by default retries failed attempts 5 times with following delays between attempts ( 5s, 10s, 20s, 40s, 80s ); retry controlled using `retry` field.
      prune: true # Specifies if resources should be pruned during auto-syncing ( false by default ).
      selfHeal: true # Specifies if partial app sync should be executed when resources are changed only in target Kubernetes cluster and no git change detected ( false by default ).
      allowEmpty: false # Allows deleting all application resources during automatic syncing ( false by default ).
    syncOptions:     # Sync options which modifies sync behavior
    - Validate=true # disables resource validation (equivalent to 'kubectl apply --validate=false') ( true by default ).
    - CreateNamespace=true # Namespace Auto-Creation ensures that namespace specified as the application destination exists in the destination cluster.
    - PrunePropagationPolicy=foreground # Supported policies are background, foreground and orphan.
    - PruneLast=true # Allow the ability for resource pruning to happen as a final, implicit wave of a sync operation
    - RespectIgnoreDifferences=true # https://github.com/argoproj/argo-cd/issues/2913

    # The retry feature is available since v1.7
    retry:
      limit: 5 # number of failed sync attempt retries; unlimited number of attempts if less than 0
      backoff:
        duration: 5s # the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        factor: 2 # a factor to multiply the base duration after each failed retry
        maxDuration: 3m # the maximum amount of time allowed for the backoff strategy
